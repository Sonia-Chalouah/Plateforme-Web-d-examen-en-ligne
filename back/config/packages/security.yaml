security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            json_login:
                # Here authentication will happen (token generation)
                check_path: /api/login_check
                # Handle successfull authentication
                success_handler: lexik_jwt_authentication.handler.authentication_success
                # Handle authentication failure (invalid credentials, no credentials etc).
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    #- lexik_jwt_authentication.jwt_token_authenticator
                    - App\Security\TokenAuthenticator
            user_checker: App\Security\UserEnabledChecker
        admin:
            pattern: ^/
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: security_logout

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
#        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api,       roles: PUBLIC_ACCESS }
        - { path: ^/admin,       roles: ROLE_ADMIN }
        - { path: ^/login,       roles: PUBLIC_ACCESS }


    role_hierarchy:
        ROLE_WRITER: ROLE_USER
        ROLE_ADMIN: [ ROLE_WRITER, ROLE_EDITOR ]
        ROLE_SUPERADMIN: ROLE_ADMIN
